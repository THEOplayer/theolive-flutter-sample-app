// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol THEOliveNativeAPI {
  func loadChannel(channelID: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class THEOliveNativeAPISetup {
  /// The codec used by THEOliveNativeAPI.
  /// Sets up an instance of `THEOliveNativeAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: THEOliveNativeAPI?) {
    let loadChannelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.theolive_flutter_sample.THEOliveNativeAPI.loadChannel", binaryMessenger: binaryMessenger)
    if let api = api {
      loadChannelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let channelIDArg = args[0] as! String
        api.loadChannel(channelID: channelIDArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loadChannelChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class THEOliveFlutterAPI {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onChannelLoadedEvent(channelID channelIDArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.theolive_flutter_sample.THEOliveFlutterAPI.onChannelLoadedEvent", binaryMessenger: binaryMessenger)
    channel.sendMessage([channelIDArg] as [Any?]) { _ in
      completion()
    }
  }
}
